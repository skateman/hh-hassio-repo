name: Deploy to the GitHub Packages Container Registry
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Retrieve the latest versions of all packages
        uses: octokit/graphql-action@v2.x
        id: get_latest_release
        with:
          query: |
            query release($repo:String!, $owner: String!) {
              repository(owner: $owner, name: $repo) {
                packages(first: 42) {
                  nodes {
                    name
                    versions(first: 2, orderBy: {direction: DESC, field: CREATED_AT}) {
                      nodes {
                        version
                      }
                    }
                  }
                }
              }
            }
          repo: hh-hassio-repo
          owner: skateman
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish the containers for packages with version mismatch
        run: |
          # Build a key-value pair of all published packages with their latest versions
          declare -A versions
          json=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -c '.repository.packages.nodes[] | [.name, .versions.nodes[1].version] ')

          echo $json | column -t -s'[],"' | while read archkey value; do
            key=$(echo $archkey | sed 's/^\(\(armv7\)\|\(armhf\)\|\(aarch64\)|\(i386\)|\(amd64\)\)-//')

            echo $key
            echo $value

            versions[$key]=$value

            echo ${versions[$key]}
          done

          echo '###################'

          for i in "${!versions[@]}"
          do
          echo "${i}=${versions[$i]}"
          done

          echo '###################'

          # Iterate through all folders containing a config.json
          find -maxdepth 2 -type f -name 'config.json' | sed 's/\.\/\([^\/]\+\)\/.*/\1/' | while read package; do
            version=$(cat ${package}/config.json | jq -r '.version')


            if [ "$package" = "$VAR2" ]; then
                echo "Strings are equal."
            else
                echo "Strings are not equal."
            fi


            echo $package
            echo $version
            echo ${versions[$package]}
            echo "-----"
          done


      - run: |
          # Set the docker storage driver to aufs
          cat /etc/docker/daemon.json | jq --arg drv aufs '. + {"storage-driver": $drv}' | sudo tee /etc/docker/daemon.json > /dev/null

          # Restart the docker daemon
          sudo service docker restart

          # Docker registry login
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login docker.pkg.github.com -u skateman --password-stdin

          # Build and publish the container
          # docker run --rm --privileged -v `pwd`:/data           \
          #   -v `pwd`:/data -v ~/.docker:/root/.docker           \
          #   homeassistant/amd64-builder                         \
          #   --armhf                                             \
          #   --target /data/audio-player                         \
          #   --image skateman/hh-hassio-repo/{arch}-audio-player \
          #   --branch master                                     \
          #   --docker-hub docker.pkg.github.com